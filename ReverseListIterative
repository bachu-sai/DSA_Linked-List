

#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node* next;
};

struct node* head=NULL;

void Insert(int x){

    struct node* temp = (struct node*)malloc(sizeof(struct node));
    temp->data = x;
    temp->next = head;
    head = temp;
}
void Insert_End(int p){

    struct node* t1 = (struct node*)malloc(sizeof(struct node));
    t1->data = p;
    t1->next = NULL;
    struct node* h;         // Additional one pointer
    h=head;
    while(h->next!=NULL)
    {
        h=h->next;
    }
    h->next=t1;
}
void Insert_Pos(int da,int z){

    struct node* ptr=(struct node*)malloc(sizeof(struct node));
    ptr->data=da;
    struct node* temp=head;             //Additional one pointer
    if(z==1)
    {
        ptr->next=head;
        head=ptr;
        return;
    }
    for(int i=1;i<z-1;i++)
    {
        temp=temp->next;
    }
    ptr->next=temp->next;
    temp->next=ptr;
    
    
}
void Delete_First()
{
    if(head==NULL)
    return;
    struct node *te=head;
    head=head->next;
    free(te);
}
void Delete_End()
{
    if(head==NULL)
    return;
    else if(head->next== NULL)
   { free(head);
     head=NULL;
   }
   else
   {
       struct node *prev;           //Additional 2 pointers prev,curr
       struct node *curr;
       curr=head;
       prev=head;
       while(curr->next!=NULL)
       {
           prev=curr;
           curr=curr->next;
       }
       prev->next=NULL;
       free(curr);
       curr=NULL;
   }
    
}
void Delete_Pos(int d)
{
    struct node *k=head;            //Additiona one pointer
    if(d==1)
    {
        head=k->next;
        free(head);
        head=NULL;
        return;
    }
    for(int i=1;i<d-1;i++)
    {
        k=k->next;
    }
    struct node *j=k->next;         //Additional another pointer
    k->next=j->next;
    free(j);
    j=NULL;
    
    
}
void Insert_Middle(int m)
{
    if(head==NULL || head->next==NULL)
    {
        return;
    }
    struct node*slow=head;
    struct node*fast=head;
    while(fast->next && fast->next->next)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    struct node* u= (struct node*)malloc(sizeof(struct node));
    u->data=m;
    u->next=NULL;
    u->next=slow->next;
    slow->next=u;
}
void Delete_Middle()
{
    struct node *fast=head;
    struct node *slow=head;
    struct node *prev=head;
    while(fast && fast->next)
    {
        prev=slow;
        slow=slow->next;
        fast=fast->next->next;
    }
    prev->next=slow->next;
    free(slow);
    slow=NULL;
}
struct node  *Reverse_Iterative()
{
    struct node *prev=NULL;
    struct node *curr=NULL;
    while(head!=NULL)
    {
        curr=head->next;
        head->next=prev;
        prev=head;
        head=curr;
    }
    head=prev;
    return head;
    
}

void Print(){

    struct node* temp = head;
    printf("\nThe List is ");
    while(temp!=NULL){
        printf(" %d", temp->data);
        temp=temp->next;
    }
}

int main(void){

    printf("how many nodes to insert : ");
    int n,i,x;
    scanf("%d",&n);

    for(i=0;i<n;i++){
        printf("\nEnter the number ");
        scanf("%d",&x);
        Insert(x);
    }
    Print();
    printf("\n--------------------------------------------------------");
    printf("how many nodes to insert end  : ");
    int k,j,p;
    scanf("%d",&k);

    for(j=0;j<k;j++){
        printf("\nEnter the number ");
        scanf("%d",&p);
        Insert_End(p);
    }
    Print();
    printf("\n--------------------------------------------------------");
    printf("\nenter node to insert at position  : ");
    printf("\nenter val:");
    int v,pos;
    scanf("%d",&v);
    printf("enter pos:");
    scanf("%d",&pos);
    Insert_Pos(v,pos);
    Print();
    printf("\n----------------------------------------------");
    Delete_First();
    Print();
    Delete_End();
    Print();
    printf("\n----------------------------------------------");
    printf("\nenter pos to delete:");
    int d;
    scanf("%d",&d);
    Delete_Pos(d);
    Print();
    printf("\n------------------------------------------------------");
    printf("\nenter node to insert in middle:");
    int m;
    scanf("%d",&m);
    Insert_Middle(m);
    Print();
    printf("\n Delete middle node:");
    Delete_Middle();
    Print();
    printf("\n-----------------------------------------------------------");
    printf("\n Reverse List Iterative:");
    Reverse_Iterative();
    Print();
   
    
    return 0;
}
